def left_triangle_pattern(n):
    """
    Print a left-aligned triangle pattern with '*' characters.

    :param n: Number of rows in the triangle
    """
    for i in range(1, n + 1):
        print(" " * (n - i) + "* " * i)

print("Left Triangle Pattern:")
left_triangle_pattern(5)

def center_triangle_pattern(n):
    """
    Print a center-aligned triangle pattern with '*' characters.

    :param n: Number of rows in the triangle
    """
    for i in range(1, n + 1):
        print(" " * (n - i) + " " + " *" * i)

print("\nCenter Triangle Pattern:")
center_triangle_pattern(5)

def right_triangle_pattern(n):
    """
    Print a right-aligned triangle pattern with '*' characters.

    :param n: Number of rows in the triangle
    """
    for i in range(1, n + 1):
        print(" " * ((n - i) * 2) + "* " * i)

print("\nRight Triangle Pattern:")
right_triangle_pattern(5)

def inverted_triangle_pattern(n):
    """
    Print an inverted triangle pattern with '*' characters.

    :param n: Number of rows in the inverted triangle
    """
    for i in range(n, 0, -1):
        print(" " * (n - i) + "* " * i)

print("\nInverted Triangle Pattern:")
inverted_triangle_pattern(5)

def pascals_triangle_pattern(rows):
    """
    Print Pascal's Triangle pattern.

    :param rows: Number of rows in Pascal's Triangle
    """
    triangle = []
    for i in range(rows):
        row = [1] * (i + 1)
        for j in range(1, i):
            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
        triangle.append(row)
    for row in triangle:
        print(" ".join(map(str, row)).center(rows * 3))

print("\nPascal's Triangle Pattern:")
pascals_triangle_pattern(5)
